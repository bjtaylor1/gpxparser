//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.8-b130911.1802 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2016.03.23 at 01:14:54 PM GMT 
//


package com.bjt.gpxparser;

import javax.xml.bind.annotation.*;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;


/**
 * <p>Java class for TrainingCenterDatabase_t complex type.
 * <p>
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;complexType name="TrainingCenterDatabase_t">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element name="Folders" type="{http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2}Folders_t" minOccurs="0"/>
 *         &lt;element name="Activities" type="{http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2}ActivityList_t" minOccurs="0"/>
 *         &lt;element name="Workouts" type="{http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2}WorkoutList_t" minOccurs="0"/>
 *         &lt;element name="Courses" type="{http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2}CourseList_t" minOccurs="0"/>
 *         &lt;element name="Author" type="{http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2}AbstractSource_t" minOccurs="0"/>
 *         &lt;element name="Extensions" type="{http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2}Extensions_t" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 */

@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "TrainingCenterDatabase_t", propOrder = {
        "folders",
        "activities",
        "workouts",
        "courses",
        "author",
        "extensions",
        "tracks"
})
public class TrainingCenterDatabaseT implements GeoFile {

    @XmlElement(name = "Folders")
    protected FoldersT folders;
    @XmlElement(name = "Activities")
    protected ActivityListT activities = new ActivityListT();
    @XmlElement(name = "Workouts")
    protected WorkoutListT workouts;
    @XmlElement(name = "Courses")
    protected CourseListT courses = new CourseListT();
    @XmlElement(name = "Author")
    protected AbstractSourceT author;
    @XmlElement(name = "Extensions")
    protected ExtensionsT extensions;

    @XmlTransient
    private ArrayList<TrackT> originalTracks;

    /**
     * Gets the value of the folders property.
     *
     * @return possible object is
     * {@link FoldersT }
     */
    public FoldersT getFolders() {
        return folders;
    }

    /**
     * Sets the value of the folders property.
     *
     * @param value allowed object is
     *              {@link FoldersT }
     */
    public void setFolders(FoldersT value) {
        this.folders = value;
    }

    /**
     * Gets the value of the activities property.
     *
     * @return possible object is
     * {@link ActivityListT }
     */
    public ActivityListT getActivities() {
        return activities;
    }

    /**
     * Sets the value of the activities property.
     *
     * @param value allowed object is
     *              {@link ActivityListT }
     */
    public void setActivities(ActivityListT value) {
        this.activities = value;
    }

    /**
     * Gets the value of the workouts property.
     *
     * @return possible object is
     * {@link WorkoutListT }
     */
    public WorkoutListT getWorkouts() {
        return workouts;
    }

    /**
     * Sets the value of the workouts property.
     *
     * @param value allowed object is
     *              {@link WorkoutListT }
     */
    public void setWorkouts(WorkoutListT value) {
        this.workouts = value;
    }

    /**
     * Gets the value of the courses property.
     *
     * @return possible object is
     * {@link CourseListT }
     */
    public CourseListT getCourses() {
        return courses;
    }

    /**
     * Sets the value of the courses property.
     *
     * @param value allowed object is
     *              {@link CourseListT }
     */
    public void setCourses(CourseListT value) {
        this.courses = value;
    }

    /**
     * Gets the value of the author property.
     *
     * @return possible object is
     * {@link AbstractSourceT }
     */
    public AbstractSourceT getAuthor() {
        return author;
    }

    /**
     * Sets the value of the author property.
     *
     * @param value allowed object is
     *              {@link AbstractSourceT }
     */
    public void setAuthor(AbstractSourceT value) {
        this.author = value;
    }

    /**
     * Gets the value of the extensions property.
     *
     * @return possible object is
     * {@link ExtensionsT }
     */
    public ExtensionsT getExtensions() {
        return extensions;
    }

    /**
     * Sets the value of the extensions property.
     *
     * @param value allowed object is
     *              {@link ExtensionsT }
     */
    public void setExtensions(ExtensionsT value) {
        this.extensions = value;
    }

    private ArrayList<TrackT> tracks;

    @Override
    public List<? extends Track> getTracks() {
        setTracks();
        return tracks;
    }

    private void setTracks() {
        if (tracks == null) {
            tracks = new ArrayList<>();
            for (final ActivityT activity : this.getActivities().getActivity()) {
                for (final ActivityLapT lap : activity.getLap()) {
                    tracks.addAll(lap.getTrack());
                }
            }
            for (final CourseT course : this.getCourses().getCourse()) {
                tracks.addAll(course.getTrack());
            }
            final Integer trackCount = tracks.size();
            final String format = "%0" + trackCount.toString().length() + "d";
            int i = 1;
            for (final TrackT track : tracks) {
                final String name = String.format("TRACK" + format, i++);
                track.setName(name);
            }
        }
    }

    @Override
    public void pruneTracks(final Collection<String> trackNamesToKeep) {
        setTracks();
        if (originalTracks == null) {
            originalTracks = new ArrayList<>(tracks);
        } else {
            tracks = new ArrayList<>(originalTracks);
        }
        tracks.removeIf(track -> !trackNamesToKeep.contains(track.getName()));
    }

    @Override
    public String getCreator() {
        return "(unavailable for TCX)";
    }
}
